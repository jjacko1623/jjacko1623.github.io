fit1 <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit1)
?mtcars
mtcars$cyl
summary(fit1)$coef[3,1]
mtcars$cyl <- factor(mtcars$cyl)
fit1 <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit1)$coef[3,1]
summary(fit1)
mtcars$cyl <- factor(mtcars$cyl)
fitwwt <- lm(mpg ~ cyl + wt, data = mtcars)
fitnwt <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fitwwt)
summary(fitwwt)$coeff
summary(fitnwt)$coeff
fitnwt <- lm(mpg ~ cyl, data = mtcars)
summary(fitnwt)$coeff
summary(fitnwt)
summary(fitwwt)
mtcars$cyl <- factor(mtcars$cyl)
fitwwt <- lm(mpg ~ cyl + wt, data = mtcars)
fitwiwt <- lm(mpg ~ cyl*wt, data = mtcars)
anova(fitwwt,fitwiwt)
q4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(q4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y~x)
xydata <- lm(y~x)
lm.influence(xydata)
sum(lm.influence(xydata)$hat)
lm.influence(xydata)$hat
fit3 <- lm(y~x)
fit4 <- lm(y[-5]~x[-5])
fit3$coefficients
fit4$coeff[2] - fit3$coeff[2]
fit3$coeff[2] - fit4$coeff[2]
fit4$coefficients
dfbeta(fit3)
dfbeta(fit4)
lm.influence(fit3)
y
x
lm.influence(lm(y~x))$dfbeta
lm.influence(lm(y~x))$dfbetas
lm.influence(lm(y~x))
dfbeta(lm.influence(lm(y~x)))
dfbetas(lm.influence(lm(y~x)))
dfbeta(lm.influence(lm(y[-5]~x[-5])))
influence.measures(lm(y~x))
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit1)$coef
summary(fit2)$coef
anova(fit1,fit2)
dim(suttle)
dim(shuttle)
library(MASS)
dim(shuttle)
head(shuttle)
summary(shuttle$use)
summary(shuttle$wind)
logisticShuttle <- glm(shuttle$use ~ shuttle$wind,family="logistic")
?family
logisticShuttle <- glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(logisticShuttle)$coef
exp(logisticShuttle$coefficients)
logisticShuttleMagn <- glm(shuttle$use ~ shuttle$magn,family="binomial")
exp(logisticShuttleMagn$coefficients)
logisticShuttleMagn <- glm(shuttle$use ~ shuttle$wind + shuttle$magn,family="binomial")
exp(logisticShuttleMagn$coefficients)
logisticShuttleAuto <- glm(shuttle$use ~ .,family="binomial")
logisticShuttleAuto <- glm(shuttle$use ~ . ,family="binomial")
dim(InsectSprays)
names(InsectSprays)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
z <- (x > 0) * x
fit <- lm(y ~ x + z)
sum(coef(fit)[2:3])
coef(fit)
summary(fit)
names(mtcars)
head(mtcars)
?mtcars
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
summary(linearTransMPG)
aggregate(mtcars$mpg,mtcars$am,sum)
?aggregate
aggregate(mtcars$mpg,by = factor(mtcars$am), FUN = sum)
factor(mtcars$am)
aggregate(mtcars$mpg,by = as.list(factor(mtcars$am)), FUN = sum)
aggregate(mtcars$mpg~mtcars$am), FUN = sum)
aggregate(mtcars$mpg ~ mtcars$am), FUN = sum)
aggregate(mpg ~ am, data = mtcars, FUN = sum)
aggregate(mpg ~ am, data = mtcars, FUN = mean)
plot(mtcars$mpg,mtcars$am)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
fitTEST <- lm(mpg ~ ., data = mtcars)
summary(fitTEST)
summary(fitTEST)$coef
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
summary(fitTEST)
plot(summary(fitTEST)$residuals)
plot(mtcars$mpg,summary(fitTEST)$residuals)
plot(summary(fitLinTransMPG)$residuals)
plot(mtcars$mpg,summary(fitLinTransMPG)$residuals)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
max(summary(fitTEST)$coef[,1])
max(summary(fitTEST)$coef[,2:length(summary(fitTEST)$coef)])
length(summary(fitTEST)$coef)]
length(summary(fitTEST)$coef)
dim(summary(fitTEST)$coef)
max(summary(fitTEST)$coef[,2:11])
max(summary(fitTEST)$coef[1,2:11])
max(summary(fitTEST)$coef[2:11,1])
max(abs(summary(fitTEST)$coef[2:11,1]))
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment.R', echo=TRUE)
fit <- glm(count ~ relevel(spray, "B"), data = InsectSprays, family = poisson)
exp(coef(fit))
z <- (x > 0) * x
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
z <- (x > 0) * x
fit <- lm(y ~ x + z)
plot(fit)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
?boxplot
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
?mtcars
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
?levels
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
confint(fitLinTransMPG)
confint(fitLinTransMPG[2])
confint(fitLinTransMPG[2,])
confint(fitLinTransMPG[,2])
7.245 + 1.96*1.764
7.245 - 1.96*1.764
confint(fitLinTransMPG)$amManual
confint(fitLinTransMPG$amManual)
confint(fitLinTransMPG,amManual)
confint(fitLinTransMPG,am)
confint(fitLinTransMPG,mtcars$am)
confint(fitLinTransMPG,"am")
confint(fitLinTransMPG,"amManual")
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
summary(fitLinTransMPG)
summary(fitNextLevel)
summary(fitNextLevel)$r.squared
summary(fitLinTransMPG)$r.squared
anova(fitLinTransMPG,fitNextLevel)
summary(fitTEST)$coef
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
?anova
anova(fitLinTransMPG,fitNextLevel,test="Chisq")
anova(fitRub,fitNextLevel,test="Chisq")
anova(fitNextLevel,test="Chisq")
anova(fitRub,test="Chisq")
anova(fitLinTransMPG,test="Chisq")
anova(lm(mpg~disp,data=mtcars),test="Chisq")
?mtcars
plot(lm(mpg~disp,data=mtcars))
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
aggregate(mpg ~ am, data = mtcars, FUN = mean)
aggregate(mpg ~ am, data = mtcars, FUN = mean)[1]
aggregate(mpg ~ am, data = mtcars, FUN = mean)[2]
aggregate(mpg ~ am, data = mtcars, FUN = mean)[2,1]
aggregate(mpg ~ am, data = mtcars, FUN = mean)[1,2]
round(aggregate(mpg ~ am, data = mtcars, FUN = mean)[1,2],1)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
?mfpar
?mfrow
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Regression/Final Assignment RM.R', echo=TRUE)
?mtcars
anova(fitLinTransMPG,fitNextLevel)
anova(fitLinTransMPG,fitNextLevel)$p.value
?anova
anova(fitLinTransMPG,fitNextLevel)[1]
anova(fitLinTransMPG,fitNextLevel)[6]
anova(fitLinTransMPG,fitNextLevel)[6,2]
anova(fitLinTransMPG,fitNextLevel)[2,6]
summary(fitNextLevel)$r.squared
anova(fitLinTransMPG,fitNextLevel, test="Chisq")
y<-mtcars$mpg
x<-cbind(1,mtcars$wt,mtcars$hp)
solve(t(x)%*%x)%*%t(x)%*%y
coef(lm(mpg~wt+hp,data = mtcars))
library(UsingR)
library(UsingR)
data(diamond)
str(diamond)
x<-diamond$carat
y<-diamond$price
beta1<-cor(x,y)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
c(beta0,beta1)
coef(lm(y~x))
n<-nrow(diamond)
I<-diag(rep(1,n))
I
H<-matrix(1,n,n)/n
xc<-(I-H)%*%x
apply(xt,2,mean)
apply(xc,2,mean)
?apply
beta0+beta1*0.2
predict(lm(y~x),newdata = data.frame(x=0.2))
yhat=beta0+beta1*x
e=y-yhat
max(abs(e-resid(lm(y~x))))
e
dim(swiss)
names(swiss)
y=swiss$Fertility
x=as.matrix(swiss[,-1])
names(x)
head(x)
solve(t(x)%*%x,t(x)%*%y)
summary(lm(y~x-1))$coef
x1=x[,1:3]
x2=x[,4:6]
dim(x)
x2=x[,4:5]
solve(t(x)%*%x,t(x)*y)
solve(t(x)%*%x,t(x)*y)[,1]
library(caret)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
?createDataPartition
adData = data.frame(diagnosis,predictors);
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE);
training = adData[-testIndex,];
testing = adData[testIndex,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors);
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE);
training = adData[-testIndex,];
testing = adData[testIndex,]
library(AppliedPredictiveModeling);
data(concrete);
library(caret);
set.seed(1000);
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]];
training = mixtures[ inTrain,];
testing = mixtures[-inTrain,]
names(training)
qplot(CompressiveStrength,colour=jobclass,data=training)
qplot(CompressiveStrength,colour=CompressiveStrength,data=training)
qplot(CompressiveStrength,colour=index2vec,data=training)
qplot(CompressiveStrength,colour=index,data=training)
library(Hmisc)
training <- mutate(training, index=1:nrow(training));
cutIndex <- cut2(training$index, g=10);
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
index=1:nrow(training)
training <- mutate(training, index=1:nrow(training));
cutIndex <- cut2(training$index, g=10);
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
names(training)
library(AppliedPredictiveModeling);
data(concrete);
library(caret);
set.seed(1000);
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]];
training = mixtures[ inTrain,];
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
library(caret);
library(AppliedPredictiveModeling);
set.seed(3433);
data(AlzheimerDisease);
adData = data.frame(diagnosis,predictors);
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];
training = adData[ inTrain,];
testing = adData[-inTrain,]
names(adData)
trimTrain <- training[58:69]
names(trimTrain)
IL_col_idx <- grep("^[Ii][Ll].*", names(training));
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9);
preObj
library(caret);
library(AppliedPredictiveModeling);
set.seed(3433)data(AlzheimerDisease);
adData = data.frame(diagnosis,predictors);
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,];
testing = adData[-inTrain,]
library(caret);
library(AppliedPredictiveModeling);
set.seed(3433);data(AlzheimerDisease);
adData = data.frame(diagnosis,predictors);
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,];
testing = adData[-inTrain,]
library(caret);
library(AppliedPredictiveModeling);
set.seed(3433);data(AlzheimerDisease);
adData = data.frame(diagnosis,predictors);
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,];
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training));
preObj <- preProcess(training[, IL_col_idx], method=c("glm, "pca"), thresh=0.8);
preObj
library(caret);
library(AppliedPredictiveModeling);
set.seed(3433);data(AlzheimerDisease);
adData = data.frame(diagnosis,predictors);
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,];
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training));
preObj <- preProcess(training[, IL_col_idx], method=c("glm", "pca"), thresh=0.8);
preObj
IL_col_idx <- grep("^[Ii][Ll].*", names(training));
preObj <- preProcess(training[, IL_col_idx], method="glm", thresh=0.8);
preObj
library(kernlab)
library(kernlab)
IL_col_idx <- grep("^[Ii][Ll].*", names(training));
preObj <- preProcess(training[, IL_col_idx], method="glm", thresh=0.8);
preObj
?preProcess
?train
trimTrain <- training[IL_col_idx]
dim(trimTrain)
names(trimTrain)
train(type~.,data=trimTrain,preProcess=c("center","scale"),method="glm")
as.matrix(trimTrain)
train(type~.,data=trimTrain,preProcess=c("center","scale"),method="glm")
library(AppliedPredictiveModeling);
data(concrete);
library(caret);
set.seed(1000);
names(concrete)
min(concrete$Superplasticizer)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.6,list=FALSE)
training <- segmentationOriginal[inTrain]
set.seed(125)
modelFit <- train(Case~., data = segmentationOriginal, method = "rpart")
modelFit$finalmodel
library(rpart)
modelFit <- train(Case~., data = segmentationOriginal, method = "rpart")
library(e1071)
modelFit <- train(Case~., data = segmentationOriginal, method = "rpart")
modelFit$finalModel
library(rattle)
library(randomForest)
?randomForest
library(ElemStatLearn)
data("vowel.test")
data("vowel.train")
vowel.test$y = as.factor(vowel.test$y)
vowel.train$y = as.factor(vowel.train$y)
set.seed(33833)
vowel.rfmodel <- train(y~.,data=vowel.train,method="rf")
library(caret)
vowel.rfmodel <- train(y~.,data=vowel.train,method="rf")
varImp(vowel.rfmodel)
?varImp
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(gbm)
library(lubridate)
library(lubridate)
library(forcast)
library(forcast)
library(forecast)
library(e1071)
data("vowel.test")
data("vowel.train")
vowel.test$y = as.factor(vowel.test$y)
vowel.terain$y = as.factor(vowel.train$y)
vowel.train$y = as.factor(vowel.train$y)
set.seed(3383)
modF <- train(y~.,data = vowel.train,method="rf")
modF2 <- train(y~.,data = vowel.train,method="gbm")
?predict
?prediction
Acc1<-predict(modF,vowel.test)
Acc2<-predict(modF2,vowel.test)
Acc1
?accuracy
accuracy(modF,vowel.test)
confusionMatrix(Acc1,vowel.test$y)
confusionMatrix(Acc2,vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData=data.frame(diagnosis,predictors)
inTrain=createDataPartition(adData$diagnosis,p=3/4)[[1]]
training=adData[inTrain,]
testing=adData[-inTrain,]
set.seed(62433)
modRF<-train(diagnosis~.,data=adData,method="rf")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain=createDataPartition(concrete$CompressiveStrength,p=3/4)[[1]]
library(caret)
inTrain=createDataPartition(concrete$CompressiveStrength,p=3/4)[[1]]
training=concrete[inTrain,]
testing=concrete[-inTrain,]
set.seed(233)
modLasso <- train(CompresiveStregnth~.,data=training,method="lasso")
modLasso <- train(CompressiveStregnth~.,data=training,method="lasso")
modLasso <- train(CompressiveStrength~.,data=training,method="lasso")
library(elasticnet)
plot.enet(modLasso$finalModel,xvar = "penalty",use.colour=TRUE)
set.seed(3523)
modSVM<-svm(CompressiveStrength,p=3/4)[[1]]
library(e1071)
modSVM<-svm(CompressiveStrength,p=3/4)[[1]]
modSVM<-svm(CompressiveStrength~.,data = training
modSVM<-svm(CompressiveStrength~.,data = training)
predSVM <- predict(modSVM,testing)
accuracy(predSVM,testing$CompressiveStrength)
library(caret)
accuracy(predSVM,testing$CompressiveStrength)
?accuracy
shiny::runApp('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/ui')
str(trees)
install.packages("ploty")
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("tidyr")
shiny::runApp('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/ui')
?sliderInput
source('C:/Users/Sophy/Desktop/delete.R', echo=TRUE)
install.packages("miniUI")
source('C:/Users/Sophy/Desktop/delete.R', echo=TRUE)
my_data
source('C:/Users/Sophy/Desktop/delete.R', echo=TRUE)
df %>% leaflet() %>% addTiles()
df %>% leaflet() %>% addTiles()
leaflet(df) %>% addTiles()
addTiles(leaflet(df()))
df(leaflet(addTiles()))
addTiles(leaflet(df))
leaflet(addTiles(df))
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
?makeIcon
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
JJMap <- leaflet() %>%
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
ftype(lm)
install.packages(pryr)
showMethods(show)
getMethod(show)
source('C:/Users/Sophy/Desktop/delete.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/delete.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/delete.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Data Products/Map using Leaflet.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Course Material/courses/09_DevelopingDataProducts/plotly/plotly.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Course Material/courses/09_DevelopingDataProducts/plotly/plotly.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Course Material/courses/09_DevelopingDataProducts/plotly/plotly.R', echo=TRUE)
source('C:/Users/Sophy/Desktop/JJ Coursera/Course Material/courses/09_DevelopingDataProducts/plotly/plotly.R', echo=TRUE)
setwd
getwd()
setwd("C:/Users/Sophy/Desktop/JJ Coursera/Data Products")
